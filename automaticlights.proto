// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

option java_multiple_files = true;
option java_package = "se";
option java_outer_classname = "automaticLights";
option objc_class_prefix = "autlts";

package autoLights;

// The AutomaticLights service definition.
service AutomaticLights {
  // Sends a simple request to turn on/off the lights. 
  // The client message contains its desired state.
  // The server returns the state after processing the request. If it succedes, voteID = 0; non-zero number, otherwise.
  rpc TurnOnOff (requestMessage) returns (requestMessage) {}
  
  // Queries the state of the room (light intensity, state on/off, vote going on)
  // Every 5s(?) queries the server about: 
  // 1. the light intensity (numerical value of the sensor reading);
  // 2. current state (true if on, false otherwise);
  // 3. If there is a vote going on (vote id number, randomly generated, 0 if none)
  // 4. The list of people inside the room
  rpc status (queryMessage) returns (queryMessage) {}
}

// Short description of intended program flow:
// 1. Client sends request;
// 2. Server responds.
//		2.1. If it succedes, ends.
//		2.2. If it fails, make a vote.
//			2.2.2. Notify other users that there is a vote going on.
//       	2.2.3. Collect votes; make decision.

message requestMessage {
  bool OnOff = 1;
  int32 voteID = 3;
}

message queryMessage {
  bool OnOff = 1;
  int32 intensity = 2;
  int32 voteID = 3;
  repeated string participants = 4;
}
